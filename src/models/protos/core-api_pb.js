/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.core_api.FetchCauseOfFeelingsRequest', null, global);
goog.exportSymbol('proto.core_api.FetchCauseOfFeelingsResponse', null, global);
goog.exportSymbol('proto.core_api.FetchFeelingsRequest', null, global);
goog.exportSymbol('proto.core_api.FetchFeelingsResponse', null, global);
goog.exportSymbol('proto.core_api.InputDataRequest', null, global);
goog.exportSymbol('proto.core_api.InputDataResponse', null, global);
goog.exportSymbol('proto.core_api.RequestCauseOfFeeling', null, global);
goog.exportSymbol('proto.core_api.RequestFeeling', null, global);
goog.exportSymbol('proto.core_api.ResponseCauseOfFeeling', null, global);
goog.exportSymbol('proto.core_api.ResponseFeeling', null, global);
goog.exportSymbol('proto.core_api.Result', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.RequestFeeling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.RequestFeeling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.RequestFeeling.displayName = 'proto.core_api.RequestFeeling';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.RequestFeeling.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.RequestFeeling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.RequestFeeling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.RequestFeeling.toObject = function(includeInstance, msg) {
  var f, obj = {
    feelingId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.RequestFeeling}
 */
proto.core_api.RequestFeeling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.RequestFeeling;
  return proto.core_api.RequestFeeling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.RequestFeeling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.RequestFeeling}
 */
proto.core_api.RequestFeeling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeelingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.RequestFeeling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.RequestFeeling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.RequestFeeling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.RequestFeeling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeelingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 feeling_id = 1;
 * @return {number}
 */
proto.core_api.RequestFeeling.prototype.getFeelingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core_api.RequestFeeling.prototype.setFeelingId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.ResponseFeeling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.ResponseFeeling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.ResponseFeeling.displayName = 'proto.core_api.ResponseFeeling';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.ResponseFeeling.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.ResponseFeeling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.ResponseFeeling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.ResponseFeeling.toObject = function(includeInstance, msg) {
  var f, obj = {
    feelingId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.ResponseFeeling}
 */
proto.core_api.ResponseFeeling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.ResponseFeeling;
  return proto.core_api.ResponseFeeling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.ResponseFeeling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.ResponseFeeling}
 */
proto.core_api.ResponseFeeling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeelingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.ResponseFeeling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.ResponseFeeling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.ResponseFeeling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.ResponseFeeling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeelingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 feeling_id = 1;
 * @return {number}
 */
proto.core_api.ResponseFeeling.prototype.getFeelingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core_api.ResponseFeeling.prototype.setFeelingId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.core_api.ResponseFeeling.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.core_api.ResponseFeeling.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.FetchFeelingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.FetchFeelingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.FetchFeelingsRequest.displayName = 'proto.core_api.FetchFeelingsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.FetchFeelingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.FetchFeelingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.FetchFeelingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchFeelingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    respondent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.FetchFeelingsRequest}
 */
proto.core_api.FetchFeelingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.FetchFeelingsRequest;
  return proto.core_api.FetchFeelingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.FetchFeelingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.FetchFeelingsRequest}
 */
proto.core_api.FetchFeelingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRespondent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.FetchFeelingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.FetchFeelingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.FetchFeelingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchFeelingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRespondent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string respondent = 1;
 * @return {string}
 */
proto.core_api.FetchFeelingsRequest.prototype.getRespondent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.core_api.FetchFeelingsRequest.prototype.setRespondent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.FetchFeelingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core_api.FetchFeelingsResponse.repeatedFields_, null);
};
goog.inherits(proto.core_api.FetchFeelingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.FetchFeelingsResponse.displayName = 'proto.core_api.FetchFeelingsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core_api.FetchFeelingsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.FetchFeelingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.FetchFeelingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.FetchFeelingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchFeelingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    feelingsList: jspb.Message.toObjectList(msg.getFeelingsList(),
    proto.core_api.ResponseFeeling.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.FetchFeelingsResponse}
 */
proto.core_api.FetchFeelingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.FetchFeelingsResponse;
  return proto.core_api.FetchFeelingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.FetchFeelingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.FetchFeelingsResponse}
 */
proto.core_api.FetchFeelingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core_api.ResponseFeeling;
      reader.readMessage(value,proto.core_api.ResponseFeeling.deserializeBinaryFromReader);
      msg.addFeelings(value);
      break;
    case 2:
      var value = /** @type {!proto.core_api.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.FetchFeelingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.FetchFeelingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.FetchFeelingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchFeelingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeelingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.core_api.ResponseFeeling.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ResponseFeeling feelings = 1;
 * @return {!Array<!proto.core_api.ResponseFeeling>}
 */
proto.core_api.FetchFeelingsResponse.prototype.getFeelingsList = function() {
  return /** @type{!Array<!proto.core_api.ResponseFeeling>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core_api.ResponseFeeling, 1));
};


/** @param {!Array<!proto.core_api.ResponseFeeling>} value */
proto.core_api.FetchFeelingsResponse.prototype.setFeelingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core_api.ResponseFeeling=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core_api.ResponseFeeling}
 */
proto.core_api.FetchFeelingsResponse.prototype.addFeelings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core_api.ResponseFeeling, opt_index);
};


proto.core_api.FetchFeelingsResponse.prototype.clearFeelingsList = function() {
  this.setFeelingsList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.core_api.Result}
 */
proto.core_api.FetchFeelingsResponse.prototype.getResult = function() {
  return /** @type {!proto.core_api.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.core_api.Result} value */
proto.core_api.FetchFeelingsResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.RequestCauseOfFeeling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.RequestCauseOfFeeling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.RequestCauseOfFeeling.displayName = 'proto.core_api.RequestCauseOfFeeling';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.RequestCauseOfFeeling.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.RequestCauseOfFeeling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.RequestCauseOfFeeling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.RequestCauseOfFeeling.toObject = function(includeInstance, msg) {
  var f, obj = {
    causeOfFeelingId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.RequestCauseOfFeeling}
 */
proto.core_api.RequestCauseOfFeeling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.RequestCauseOfFeeling;
  return proto.core_api.RequestCauseOfFeeling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.RequestCauseOfFeeling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.RequestCauseOfFeeling}
 */
proto.core_api.RequestCauseOfFeeling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCauseOfFeelingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.RequestCauseOfFeeling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.RequestCauseOfFeeling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.RequestCauseOfFeeling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.RequestCauseOfFeeling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCauseOfFeelingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 cause_of_feeling_id = 1;
 * @return {number}
 */
proto.core_api.RequestCauseOfFeeling.prototype.getCauseOfFeelingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core_api.RequestCauseOfFeeling.prototype.setCauseOfFeelingId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.ResponseCauseOfFeeling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.ResponseCauseOfFeeling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.ResponseCauseOfFeeling.displayName = 'proto.core_api.ResponseCauseOfFeeling';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.ResponseCauseOfFeeling.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.ResponseCauseOfFeeling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.ResponseCauseOfFeeling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.ResponseCauseOfFeeling.toObject = function(includeInstance, msg) {
  var f, obj = {
    causeOfFeelingId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.ResponseCauseOfFeeling}
 */
proto.core_api.ResponseCauseOfFeeling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.ResponseCauseOfFeeling;
  return proto.core_api.ResponseCauseOfFeeling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.ResponseCauseOfFeeling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.ResponseCauseOfFeeling}
 */
proto.core_api.ResponseCauseOfFeeling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCauseOfFeelingId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.ResponseCauseOfFeeling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.ResponseCauseOfFeeling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.ResponseCauseOfFeeling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.ResponseCauseOfFeeling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCauseOfFeelingId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 cause_of_feeling_id = 1;
 * @return {number}
 */
proto.core_api.ResponseCauseOfFeeling.prototype.getCauseOfFeelingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core_api.ResponseCauseOfFeeling.prototype.setCauseOfFeelingId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.core_api.ResponseCauseOfFeeling.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.core_api.ResponseCauseOfFeeling.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.FetchCauseOfFeelingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.FetchCauseOfFeelingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.FetchCauseOfFeelingsRequest.displayName = 'proto.core_api.FetchCauseOfFeelingsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.FetchCauseOfFeelingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.FetchCauseOfFeelingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.FetchCauseOfFeelingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchCauseOfFeelingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    respondent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.FetchCauseOfFeelingsRequest}
 */
proto.core_api.FetchCauseOfFeelingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.FetchCauseOfFeelingsRequest;
  return proto.core_api.FetchCauseOfFeelingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.FetchCauseOfFeelingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.FetchCauseOfFeelingsRequest}
 */
proto.core_api.FetchCauseOfFeelingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRespondent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.FetchCauseOfFeelingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.FetchCauseOfFeelingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.FetchCauseOfFeelingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchCauseOfFeelingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRespondent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string respondent = 1;
 * @return {string}
 */
proto.core_api.FetchCauseOfFeelingsRequest.prototype.getRespondent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.core_api.FetchCauseOfFeelingsRequest.prototype.setRespondent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.FetchCauseOfFeelingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core_api.FetchCauseOfFeelingsResponse.repeatedFields_, null);
};
goog.inherits(proto.core_api.FetchCauseOfFeelingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.FetchCauseOfFeelingsResponse.displayName = 'proto.core_api.FetchCauseOfFeelingsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core_api.FetchCauseOfFeelingsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.FetchCauseOfFeelingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.FetchCauseOfFeelingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchCauseOfFeelingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    causeOfFeelingsList: jspb.Message.toObjectList(msg.getCauseOfFeelingsList(),
    proto.core_api.ResponseCauseOfFeeling.toObject, includeInstance),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.FetchCauseOfFeelingsResponse}
 */
proto.core_api.FetchCauseOfFeelingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.FetchCauseOfFeelingsResponse;
  return proto.core_api.FetchCauseOfFeelingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.FetchCauseOfFeelingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.FetchCauseOfFeelingsResponse}
 */
proto.core_api.FetchCauseOfFeelingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core_api.ResponseCauseOfFeeling;
      reader.readMessage(value,proto.core_api.ResponseCauseOfFeeling.deserializeBinaryFromReader);
      msg.addCauseOfFeelings(value);
      break;
    case 2:
      var value = /** @type {!proto.core_api.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.FetchCauseOfFeelingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.FetchCauseOfFeelingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.FetchCauseOfFeelingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCauseOfFeelingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.core_api.ResponseCauseOfFeeling.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ResponseCauseOfFeeling cause_of_feelings = 1;
 * @return {!Array<!proto.core_api.ResponseCauseOfFeeling>}
 */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.getCauseOfFeelingsList = function() {
  return /** @type{!Array<!proto.core_api.ResponseCauseOfFeeling>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core_api.ResponseCauseOfFeeling, 1));
};


/** @param {!Array<!proto.core_api.ResponseCauseOfFeeling>} value */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.setCauseOfFeelingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core_api.ResponseCauseOfFeeling=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core_api.ResponseCauseOfFeeling}
 */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.addCauseOfFeelings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core_api.ResponseCauseOfFeeling, opt_index);
};


proto.core_api.FetchCauseOfFeelingsResponse.prototype.clearCauseOfFeelingsList = function() {
  this.setCauseOfFeelingsList([]);
};


/**
 * optional Result result = 2;
 * @return {!proto.core_api.Result}
 */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.getResult = function() {
  return /** @type {!proto.core_api.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.core_api.Result} value */
proto.core_api.FetchCauseOfFeelingsResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.InputDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core_api.InputDataRequest.repeatedFields_, null);
};
goog.inherits(proto.core_api.InputDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.InputDataRequest.displayName = 'proto.core_api.InputDataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core_api.InputDataRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.InputDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.InputDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.InputDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.InputDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    feeling: (f = msg.getFeeling()) && proto.core_api.RequestFeeling.toObject(includeInstance, f),
    causeOfFeelingList: jspb.Message.toObjectList(msg.getCauseOfFeelingList(),
    proto.core_api.RequestCauseOfFeeling.toObject, includeInstance),
    respondent: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.InputDataRequest}
 */
proto.core_api.InputDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.InputDataRequest;
  return proto.core_api.InputDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.InputDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.InputDataRequest}
 */
proto.core_api.InputDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core_api.RequestFeeling;
      reader.readMessage(value,proto.core_api.RequestFeeling.deserializeBinaryFromReader);
      msg.setFeeling(value);
      break;
    case 2:
      var value = new proto.core_api.RequestCauseOfFeeling;
      reader.readMessage(value,proto.core_api.RequestCauseOfFeeling.deserializeBinaryFromReader);
      msg.addCauseOfFeeling(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRespondent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.InputDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.InputDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.InputDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.InputDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeeling();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.core_api.RequestFeeling.serializeBinaryToWriter
    );
  }
  f = message.getCauseOfFeelingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.core_api.RequestCauseOfFeeling.serializeBinaryToWriter
    );
  }
  f = message.getRespondent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RequestFeeling feeling = 1;
 * @return {?proto.core_api.RequestFeeling}
 */
proto.core_api.InputDataRequest.prototype.getFeeling = function() {
  return /** @type{?proto.core_api.RequestFeeling} */ (
    jspb.Message.getWrapperField(this, proto.core_api.RequestFeeling, 1));
};


/** @param {?proto.core_api.RequestFeeling|undefined} value */
proto.core_api.InputDataRequest.prototype.setFeeling = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.core_api.InputDataRequest.prototype.clearFeeling = function() {
  this.setFeeling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core_api.InputDataRequest.prototype.hasFeeling = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RequestCauseOfFeeling cause_of_feeling = 2;
 * @return {!Array<!proto.core_api.RequestCauseOfFeeling>}
 */
proto.core_api.InputDataRequest.prototype.getCauseOfFeelingList = function() {
  return /** @type{!Array<!proto.core_api.RequestCauseOfFeeling>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core_api.RequestCauseOfFeeling, 2));
};


/** @param {!Array<!proto.core_api.RequestCauseOfFeeling>} value */
proto.core_api.InputDataRequest.prototype.setCauseOfFeelingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.core_api.RequestCauseOfFeeling=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core_api.RequestCauseOfFeeling}
 */
proto.core_api.InputDataRequest.prototype.addCauseOfFeeling = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.core_api.RequestCauseOfFeeling, opt_index);
};


proto.core_api.InputDataRequest.prototype.clearCauseOfFeelingList = function() {
  this.setCauseOfFeelingList([]);
};


/**
 * optional string respondent = 3;
 * @return {string}
 */
proto.core_api.InputDataRequest.prototype.getRespondent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.core_api.InputDataRequest.prototype.setRespondent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core_api.InputDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core_api.InputDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core_api.InputDataResponse.displayName = 'proto.core_api.InputDataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core_api.InputDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.core_api.InputDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core_api.InputDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.InputDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core_api.InputDataResponse}
 */
proto.core_api.InputDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core_api.InputDataResponse;
  return proto.core_api.InputDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core_api.InputDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core_api.InputDataResponse}
 */
proto.core_api.InputDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core_api.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core_api.InputDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core_api.InputDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core_api.InputDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core_api.InputDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Result result = 1;
 * @return {!proto.core_api.Result}
 */
proto.core_api.InputDataResponse.prototype.getResult = function() {
  return /** @type {!proto.core_api.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core_api.Result} value */
proto.core_api.InputDataResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.core_api.Result = {
  SUCCESS: 0,
  FAILED: 1
};

goog.object.extend(exports, proto.core_api);
